#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


var io = require('socket.io').listen(server);

io.on('connection',function(socket){
    console.log('a user connected');
    socket.on('disconnect', function(){
      console.log('user disconnected');
    });

    socket.on('chatmessage', function(msg){
      io.emit('chatmessage', msg);
    });
});

var turnbineIndex = 100;
var mqttConnected = false;
var mqtt = require('mqtt')
var client  = mqtt.connect('mqtt://mqttdev.nuviot.com',{'username':'kevinw','password':'XXX'})
 
client.on('connect', function () {
  console.log("Connected to mqtt");
  mqttConnected = true;
  client.subscribe('#', function (err) {
    if (!err) {
      client.publish('presence', 'Hello mqtt')
    }
  })
})

client.on('error', function (err) {
  console.log("Could not connect to mqtt");
  console.log(err);
})
 
client.on('message', function (topic, message) {
  // message is Buffer
  console.log(message.toString())
})

setInterval(() => {
  var power = (Math.random() * 250) + 750
  
  var rpm = (Math.random() * 10) + 40

  var deviceId = `generator${turnbineIndex}`;
  var msg = {'turnbiteId':deviceId, 'power':power, 'prm':rpm, 'timeStamp': new Date().toJSON()};

  if(mqttConnected){
    client.publish(`turbinestatus/current/${deviceId}`, JSON.stringify(msg));
  //  console.log(msg);
  }
  io.emit('turnbineUpdated', msg);
  turnbineIndex++;
  if(turnbineIndex == 111)
  {
    turnbineIndex = 100;
  }
},100);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
